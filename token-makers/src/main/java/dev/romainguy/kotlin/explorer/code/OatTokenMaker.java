/* The following code was generated by JFlex 1.4.1 on 6/14/24, 9:12 AM */

package dev.romainguy.kotlin.explorer.code;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/14/24, 9:12 AM from the specification file
 * <tt>/Users/romainguy/Source/kotlin-explorer/token-makers/src/main/java/dev/romainguy/kotlin/explorer/code/OatTokenMaker.flex</tt>
 */
public class OatTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 2;
  public static final int FUNCTION_SIGNATURE = 6;
  public static final int YYINITIAL = 0;
  public static final int CLASS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\20\1\0\1\21\23\0\1\21\1\0\1\13\1\11"+
    "\1\35\1\12\1\0\1\14\1\36\1\37\3\12\1\17\1\33\1\16"+
    "\1\6\1\62\1\63\1\64\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\22\1\15\1\34\1\0\1\34\2\0\1\27\1\65\1\23\1\40"+
    "\1\2\1\56\1\103\1\71\1\60\2\1\1\25\1\101\1\52\1\67"+
    "\1\44\1\77\1\42\1\31\1\73\1\1\1\54\1\50\1\7\1\75"+
    "\1\46\1\12\1\0\1\12\1\0\1\1\1\0\1\30\1\66\1\24"+
    "\1\41\1\4\1\57\1\104\1\72\1\61\2\3\1\26\1\102\1\53"+
    "\1\70\1\45\1\100\1\43\1\32\1\74\1\3\1\55\1\51\1\10"+
    "\1\76\1\47\u2117\0\1\15\ude6d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\1\2\2\1\1\3\1\4\1\1\1\4"+
    "\1\1\2\5\2\6\1\1\1\5\1\7\1\10\1\11"+
    "\1\7\1\1\1\5\1\1\1\5\1\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\1\5\1\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\1\5\1\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\1\5\1\1\1\5\5\1"+
    "\1\12\1\1\1\13\2\14\1\0\1\15\1\0\2\15"+
    "\1\16\1\17\1\15\1\0\1\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\3\20\1\21\1\0\2\1\1\22"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\1\1\23"+
    "\1\1\2\24\2\0\2\5\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u0159\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u0159\0\u05a9"+
    "\0\u05ee\0\u026d\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u0159\0\u040b\0\u1071\0\u0159\0\u09f9\0\u10b6\0\u10fb\0\u0159"+
    "\0\u0159\0\u040b\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u0e49\0\u0e8e\0\u13f2\0\u0ed3"+
    "\0\u1437\0\u147c\0\u14c1\0\u1071\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u1437\0\u019e\0\u172e\0\u0159"+
    "\0\u040b\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\2\7\4\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\6\2\16\6\7\5\6\45\7\1\6"+
    "\5\7\1\10\2\7\4\6\1\11\1\12\1\13\1\14"+
    "\1\17\1\6\2\16\6\7\5\6\45\7\2\6\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\11\1\32\3\27\1\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\27\2\6\2\27"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\25\1\26\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\3\23\1\45\1\46\1\61\1\62\1\63"+
    "\1\64\1\6\1\21\1\6\1\21\1\6\1\21\1\65"+
    "\1\66\1\67\1\70\1\6\10\71\4\6\1\11\1\12"+
    "\1\6\1\14\1\15\1\6\10\71\5\6\45\71\1\6"+
    "\4\72\2\7\2\72\4\6\1\11\1\12\1\73\1\14"+
    "\1\15\1\6\10\72\3\6\1\74\1\6\22\72\3\7"+
    "\20\72\105\0\12\7\1\0\3\7\4\0\11\7\1\0"+
    "\60\7\2\75\1\7\1\0\3\7\4\0\11\7\1\0"+
    "\51\7\20\11\1\0\64\11\16\0\1\11\105\0\1\76"+
    "\106\0\1\15\63\0\12\7\1\0\3\7\4\0\3\7"+
    "\2\77\4\7\1\0\51\7\1\0\4\100\2\0\2\100"+
    "\10\0\1\17\1\0\10\100\5\0\22\100\3\0\20\100"+
    "\77\0\2\101\7\0\2\21\3\0\1\21\13\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\3\0\2\21\3\0\1\21\13\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\6\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\101\1\102\1\0\1\21\1\0\1\21\5\0\2\23"+
    "\53\0\3\23\25\0\2\23\2\103\51\0\3\23\25\0"+
    "\2\104\37\0\2\105\12\0\2\106\1\107\23\0\2\21"+
    "\2\104\1\0\1\21\13\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\6\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\105\1\52\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\2\106\1\107\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\13\30"+
    "\1\110\71\30\14\31\1\111\70\31\23\0\2\101\4\0"+
    "\2\101\55\0\2\21\3\0\1\21\12\0\1\101\1\102"+
    "\1\0\1\21\1\0\1\21\1\101\1\102\6\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\2\0\1\101\1\0\1\101\24\0\2\101\5\0\2\101"+
    "\2\104\23\0\2\101\2\0\2\101\12\0\1\101\1\21"+
    "\1\102\3\0\1\21\13\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\101\1\102\5\0\1\101\1\102\1\104\1\112"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\101\1\102\1\0\1\21\1\101\1\102\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\25\0\2\101"+
    "\11\0\2\113\46\0\2\21\3\0\1\21\13\0\1\21"+
    "\1\101\1\102\1\0\1\21\1\0\1\21\5\0\1\113"+
    "\1\114\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\4\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\5\0\2\104\35\0\2\104\14\0\2\106\1\107"+
    "\6\0\4\101\11\0\2\21\2\104\1\0\1\21\13\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\6\0"+
    "\1\21\1\0\1\21\1\104\1\112\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\2\106\1\107\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\101\1\102\1\101\1\102\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\5\0\2\104\20\0\2\115\31\0"+
    "\2\106\1\107\23\0\2\21\2\104\1\0\1\21\13\0"+
    "\1\21\1\0\1\21\1\115\1\116\1\0\1\21\6\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\2\106\1\107\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\5\0\2\104\53\0\2\106\1\107"+
    "\23\0\2\21\2\104\1\0\1\21\13\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\6\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\2\106"+
    "\1\107\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\23\0\2\104\2\101\61\0\2\21\3\0\1\21"+
    "\12\0\1\104\1\112\1\101\1\102\1\0\1\21\1\0"+
    "\1\21\6\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\4\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\42\0\2\104\44\0\2\21\3\0"+
    "\1\21\13\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\6\0\1\21\1\104\1\112\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\4\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\2\0\1\101\1\0\1\101\24\0"+
    "\2\117\13\0\2\120\37\0\1\101\1\21\1\102\3\0"+
    "\1\21\13\0\1\21\1\0\1\21\1\0\1\21\1\117"+
    "\1\121\6\0\1\21\1\0\1\21\1\0\1\21\1\120"+
    "\1\122\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\4\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\5\0\2\104\14\0\2\101\4\0"+
    "\2\101\27\0\2\106\1\107\23\0\2\21\2\104\1\0"+
    "\1\21\12\0\1\101\1\102\1\0\1\21\1\0\1\21"+
    "\1\101\1\102\6\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\2\106\1\107\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\44\0\2\123"+
    "\42\0\2\21\3\0\1\21\13\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\6\0\1\21\1\0\1\21"+
    "\1\123\1\124\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\31\0\2\117"+
    "\55\0\2\21\3\0\1\21\13\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\117\1\121\6\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\31\0\2\101"+
    "\25\0\2\101\26\0\2\21\3\0\1\21\13\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\101\1\102\6\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\101\1\102"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\60\0\2\101\26\0\2\21\3\0\1\21\13\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\101\1\102"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\2\0\1\101\1\0\1\101\66\0\2\101\12\0\1\101"+
    "\1\21\1\102\3\0\1\21\13\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\6\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\101\1\102\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\12\125\1\0"+
    "\3\125\4\0\11\125\1\0\51\125\1\7\10\126\1\7"+
    "\1\0\3\7\4\0\1\7\10\126\1\127\2\126\2\7"+
    "\45\126\1\0\10\130\12\0\11\130\1\0\1\130\2\0"+
    "\45\130\20\131\1\0\64\131\2\7\1\132\1\7\3\132"+
    "\3\7\1\0\3\7\4\0\1\7\2\132\2\7\2\132"+
    "\2\7\1\0\4\7\2\132\14\7\2\132\2\7\5\132"+
    "\16\7\20\76\1\0\64\76\12\7\1\0\3\7\4\0"+
    "\5\7\2\133\2\7\1\0\51\7\1\0\10\100\12\0"+
    "\11\100\4\0\45\100\2\0\1\134\1\0\3\134\14\0"+
    "\2\134\2\0\2\134\7\0\2\134\14\0\2\134\2\0"+
    "\5\134\23\0\2\104\53\0\3\104\26\0\1\104\53\0"+
    "\1\104\62\0\2\135\46\0\2\21\3\0\1\21\13\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\5\0"+
    "\1\135\1\136\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\4\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\60\0\2\137\26\0\2\21\3\0\1\21"+
    "\13\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\6\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\137\1\140\4\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\71\0\2\141\35\0\2\142\63\0\2\21"+
    "\3\0\1\21\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\6\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\4\0\1\21\1\0\1\21"+
    "\1\141\1\143\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\3\0\2\21\3\0\1\21"+
    "\12\0\1\142\1\144\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\6\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\4\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\23\0\2\105\4\0\2\105\55\0"+
    "\2\21\3\0\1\21\12\0\1\105\1\52\1\0\1\21"+
    "\1\0\1\21\1\105\1\52\6\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\10\127"+
    "\12\0\13\127\2\0\45\127\20\131\1\0\16\131\1\145"+
    "\45\131\2\7\1\132\1\7\3\132\3\7\1\0\3\7"+
    "\4\0\1\146\2\132\2\7\2\132\2\7\1\0\4\7"+
    "\2\132\14\7\2\132\2\7\5\132\30\7\1\0\3\7"+
    "\4\0\7\7\2\147\1\0\51\7\42\0\2\150\44\0"+
    "\2\21\3\0\1\21\13\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\6\0\1\21\1\150\1\151\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\4\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\56\0\2\104\30\0"+
    "\2\21\3\0\1\21\13\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\6\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\104\1\112\1\0\1\21\4\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\25\0\2\152\2\0"+
    "\2\153\126\0\2\104\32\0\2\21\3\0\1\21\13\0"+
    "\1\21\1\152\1\154\1\0\1\21\1\153\1\155\6\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\4\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\3\0\2\21\3\0\1\21\13\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\6\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\104\1\112\1\0\1\21\1\0\1\21\4\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\12\7"+
    "\1\0\3\7\4\0\7\7\2\156\1\0\51\7\40\0"+
    "\2\101\136\0\2\101\13\0\2\21\3\0\1\21\13\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\1\21\5\0"+
    "\1\101\1\102\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\4\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\3\0\2\21\3\0\1\21\13\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\101\1\102"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6279];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\5\1\1\11\12\1\1\11\51\1\1\11"+
    "\1\1\1\0\1\11\1\0\2\1\2\11\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\5\1\1\11"+
    "\1\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public OatTokenMaker() {
        super();
    }

    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }

    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { ";", "→", null };
    }

    @Override
	public boolean getMarkOccurrencesOfTokenType(int type) {
		return type == Token.RESERVED_WORD || type == Token.FUNCTION || type == Token.VARIABLE;
	}

    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }

    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OatTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OatTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 23: break;
        case 17: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 24: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 10: 
          { addToken(Token.MARKUP_CDATA); addNullToken(); return firstToken;
          }
        case 27: break;
        case 11: 
          { addToken(Token.DATA_TYPE);
        yybegin(FUNCTION_SIGNATURE);
          }
        case 28: break;
        case 5: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 13: 
          { addToken(Token.VARIABLE);
          }
        case 30: break;
        case 21: 
          { addToken(Token.RESERVED_WORD_2); yybegin(CLASS);
          }
        case 31: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 32: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 33: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 34: break;
        case 20: 
          { addToken(Token.DATA_TYPE);
          }
        case 35: break;
        case 9: 
          { addToken(Token.ERROR_CHAR);
          }
        case 36: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 2: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 38: break;
        case 12: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 39: break;
        case 19: 
          { addToken(Token.PREPROCESSOR); yybegin(CODE);
          }
        case 40: break;
        case 6: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case CODE: {
              addNullToken(); return firstToken;
            }
            case 111: break;
            case FUNCTION_SIGNATURE: {
              addNullToken(); return firstToken;
            }
            case 112: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 113: break;
            case CLASS: {
              addNullToken(); return firstToken;
            }
            case 114: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
