/* The following code was generated by JFlex 1.4.1 on 6/6/24, 6:28 PM */

package dev.romainguy.kotlin.explorer.code;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/6/24, 6:28 PM from the specification file
 * <tt>/Users/romainguy/Source/kotlin-explorer/token-makers/src/main/java/dev/romainguy/kotlin/explorer/code/DexTokenMaker.flex</tt>
 */
public class DexTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 2;
  public static final int FUNCTION_SIGNATURE = 6;
  public static final int YYINITIAL = 0;
  public static final int CLASS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\1\0\1\12\23\0\1\12\1\0\1\6\1\31"+
    "\1\26\1\5\1\0\1\7\1\27\1\30\3\5\1\4\1\24\1\10"+
    "\1\64\1\65\1\64\1\64\1\64\1\64\1\64\1\3\1\3\1\3"+
    "\1\13\1\0\1\25\1\0\1\25\2\0\1\20\1\54\1\14\1\50"+
    "\1\56\1\60\1\42\1\44\1\32\2\1\1\16\1\1\1\34\1\40"+
    "\2\1\1\46\1\22\1\36\1\52\1\62\4\1\1\5\1\0\1\5"+
    "\1\0\1\1\1\0\1\21\1\55\1\15\1\51\1\57\1\61\1\43"+
    "\1\45\1\33\2\2\1\17\1\2\1\35\1\41\2\2\1\47\1\23"+
    "\1\37\1\53\1\63\4\2\1\66\1\0\1\67\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\5\1\1\2\1\3\1\1\1\3\2\4\1\5"+
    "\1\6\1\1\1\4\2\1\1\4\5\1\1\7\1\10"+
    "\1\11\1\1\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\13\6\0\4\17\1\0\3\20\1\21\1\0\1\1"+
    "\6\0\1\17\2\1\3\0\1\22\2\0\1\23\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0118\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u0150\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u02d8\0\u06c8\0\u0150\0\u0118\0\u0118\0\u03f0\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0150\0\u0850\0\u02d8"+
    "\0\u0888\0\u08c0\0\u0508\0\u0540\0\u08f8\0\u0578\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u08c0\0\u0930"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0118\0\u0bd0\0\u0c08\0\u0150"+
    "\0\u0c40\0\u0c78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\3\6\1\12\1\13\1\14"+
    "\1\6\2\15\6\7\6\6\32\7\2\10\3\6\2\7"+
    "\1\10\1\11\3\6\1\12\1\13\1\16\1\6\2\15"+
    "\6\7\6\6\32\7\2\10\3\6\1\7\1\17\1\20"+
    "\2\6\1\21\1\22\1\12\1\0\2\6\1\7\1\17"+
    "\1\23\1\24\1\7\1\17\1\7\1\17\5\6\1\25"+
    "\1\7\1\17\1\7\1\17\1\7\1\17\1\7\1\17"+
    "\1\7\1\17\1\7\1\17\1\7\1\17\1\7\1\17"+
    "\1\7\1\17\1\7\1\17\1\7\1\17\1\7\1\17"+
    "\1\26\1\27\2\20\1\30\2\6\3\31\4\6\1\12"+
    "\1\13\1\14\1\6\10\31\6\6\34\31\3\6\2\32"+
    "\1\7\1\33\3\6\1\12\1\13\1\14\1\6\10\32"+
    "\3\6\1\34\2\6\32\32\2\7\2\6\70\0\4\7"+
    "\2\0\2\7\3\0\11\7\1\0\44\7\3\10\2\0"+
    "\2\7\3\0\1\35\10\10\1\0\5\7\34\10\2\7"+
    "\4\0\1\36\73\0\1\37\71\0\1\14\55\0\4\7"+
    "\2\0\2\7\3\0\3\7\2\40\4\7\1\0\43\7"+
    "\1\0\2\41\7\0\1\16\1\0\10\41\6\0\32\41"+
    "\4\0\5\42\1\0\3\42\2\0\11\42\1\0\43\42"+
    "\1\7\1\43\2\20\2\0\2\7\3\0\1\44\1\43"+
    "\1\20\1\43\1\20\1\43\1\20\1\43\1\20\1\0"+
    "\5\7\1\43\1\20\1\43\1\20\1\43\1\20\1\43"+
    "\1\20\1\43\1\20\1\43\1\20\1\43\1\20\1\43"+
    "\1\20\1\43\1\20\1\43\1\20\1\43\1\20\1\43"+
    "\1\20\1\43\3\20\2\7\6\21\1\45\61\21\7\22"+
    "\1\46\60\22\12\23\1\0\55\23\5\47\1\23\3\47"+
    "\1\23\1\0\11\47\1\23\43\47\14\0\2\50\2\51"+
    "\2\0\2\52\6\0\2\53\14\0\2\54\6\0\2\55"+
    "\6\0\3\7\1\56\2\0\2\7\3\0\11\7\1\0"+
    "\37\7\1\56\1\57\2\7\3\42\1\60\1\42\1\0"+
    "\3\42\2\0\11\42\1\0\37\42\1\60\1\61\2\42"+
    "\11\62\1\0\56\62\4\63\2\0\2\63\3\0\11\63"+
    "\1\0\43\63\1\7\3\64\2\0\2\7\3\0\1\7"+
    "\10\64\1\65\2\64\3\7\34\64\2\7\1\0\3\66"+
    "\10\0\11\66\1\0\1\66\3\0\34\66\2\0\11\67"+
    "\1\0\56\67\11\36\1\0\56\36\11\37\1\0\56\37"+
    "\4\7\2\0\2\7\3\0\5\7\2\70\2\7\1\0"+
    "\43\7\1\0\3\41\10\0\11\41\5\0\34\41\2\0"+
    "\1\7\3\43\2\0\2\7\3\0\1\44\10\43\1\0"+
    "\5\7\34\43\2\7\44\0\2\71\62\0\2\72\72\0"+
    "\2\73\56\0\2\74\72\0\2\75\44\0\2\76\50\0"+
    "\4\7\2\0\2\7\3\0\11\7\1\0\37\7\2\56"+
    "\2\7\5\42\1\0\3\42\2\0\11\42\1\0\37\42"+
    "\2\60\2\42\11\62\1\0\55\62\1\77\1\0\3\65"+
    "\10\0\13\65\3\0\34\65\2\0\11\67\1\0\16\67"+
    "\1\100\37\67\4\7\2\0\2\7\3\0\7\7\2\101"+
    "\1\0\43\7\20\0\2\102\102\0\2\103\72\0\2\104"+
    "\64\0\2\105\102\0\2\106\54\0\2\107\26\0\4\7"+
    "\2\0\2\7\3\0\7\7\2\110\1\0\43\7\46\0"+
    "\2\105\62\0\2\105\72\0\2\74\74\0\2\111\32\0"+
    "\2\74\64\0\2\112\126\0\2\105\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\31\1\2\11\1\1\6\0"+
    "\4\1\1\0\4\1\1\0\1\1\6\0\3\1\3\0"+
    "\1\11\2\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public DexTokenMaker() {
        super();
    }

    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }

    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { ";", null };
    }

    @Override
	public boolean getMarkOccurrencesOfTokenType(int type) {
		return type == Token.RESERVED_WORD || type == Token.FUNCTION || type == Token.VARIABLE;
	}

    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }

    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DexTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DexTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { addToken(Token.PREPROCESSOR);
          }
        case 20: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 22: break;
        case 17: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 23: break;
        case 3: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 8: 
          { addToken(Token.MARKUP_CDATA); addNullToken(); return firstToken;
          }
        case 25: break;
        case 10: 
          { addToken(Token.DATA_TYPE);
        yybegin(FUNCTION_SIGNATURE);
          }
        case 26: break;
        case 11: 
          { addToken(Token.RESERVED_WORD);
          }
        case 27: break;
        case 15: 
          { addToken(Token.VARIABLE);
          }
        case 28: break;
        case 19: 
          { addToken(Token.RESERVED_WORD_2); yybegin(CLASS);
          }
        case 29: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 30: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 31: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 32: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 33: break;
        case 6: 
          { addToken(Token.ERROR_CHAR);
          }
        case 34: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 9: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 36: break;
        case 7: 
          { addToken(Token.PREPROCESSOR); yybegin(CODE);
          }
        case 37: break;
        case 4: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case CODE: {
              addNullToken(); return firstToken;
            }
            case 75: break;
            case FUNCTION_SIGNATURE: {
              addNullToken(); return firstToken;
            }
            case 76: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 77: break;
            case CLASS: {
              addNullToken(); return firstToken;
            }
            case 78: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
